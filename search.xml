<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Orca-大模型推理系统开山之作</title>
      <link href="/2024/09/14/Orca/"/>
      <url>/2024/09/14/Orca/</url>
      
        <content type="html"><![CDATA[<p>本文提出了一种新的分布式服务系统 ORCA，针对大规模 Transformer 模型的自回归生成任务，解决了现有推理服务系统在多迭代特性任务上表现不佳的问题。ORCA 通过引入 <strong>迭代级调度</strong> 和 <strong>选择性批处理</strong> 两项技术，实现了更灵活高效的调度。实验结果表明，在处理 GPT-3 175B 模型时，ORCA 在保持相同延迟的情况下，吞吐量较 NVIDIA FasterTransformer 提升了 36.9 倍。</p><p>论文：<a href="https://www.usenix.org/conference/osdi22/presentation/yu">ORCA: A Distributed Serving System for Transformer-Based Generative Models</a></p><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>本文讨论了在服务大规模 Transformer 模型时面临的挑战，特别是用于生成任务的模型，如语言生成、代码生成等。典型的例子包括 GPT-3 这样的模型。随着对模型需求的不断增长，低延迟和高吞吐量成为推理系统的目标，早期通过使用如Triton和FasterTransformer的组合来部署服务，Triton主要负责将多个客户端请求分组到一个批中，而FasterTransformer作为模型推理进行优化的执行引擎从Triton接收该批，并以批处理的方式进行推理过程。这些模型通过一种多次迭代的自回归方式处理文本（即每次生成一个词元），这给现有系统带来了特定的挑战。</p><!-- <p align="center">  <img src="posts_img/Orca/1.png" alt="Description of image" width="700" /></p> --><p><img src="/posts_img/Orca/1.png?50"></p><h1 id="问题陈述"><a href="#问题陈述" class="headerlink" title="问题陈述"></a>问题陈述</h1><p>现有的服务基于 Transformer 的生成模型的系统存在以下几个关键低效之处：</p><ul><li>批调度：一个批次中已完成的请求必须等待整个批次完成，导致延迟增加。</li><li>排队延迟：新请求在当前批次完成之前无法处理。</li><li>多次迭代开销：由于每个序列中的词元必须通过迭代处理，同一模型需要多次调用来完成单个推理请求，这影响了吞吐量。</li></ul><p><img src="/posts_img/Orca/2.png?50"></p><p>注意，在语言模型的训练中不会出现提前完成和延迟加入请求的问题；训练过程通过使用teacher forcing technique在一次迭代中完成对整个批次的处理。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>作者提出了 ORCA，一个优化大规模 Transformer 模型的分布式服务系统。ORCA 引入了两个关键技术：</p><h2 id="迭代级调度"><a href="#迭代级调度" class="headerlink" title="迭代级调度"></a>迭代级调度</h2><p>与其对整个请求进行批处理，ORCA 对每次迭代进行调度：</p><p><img src="/posts_img/Orca/3.png?50"></p><ul><li>更快返回已完成的请求，减少延迟。</li><li>在当前迭代后立即处理新到的请求，允许更快的响应。</li></ul><h2 id="选择性批处理"><a href="#选择性批处理" class="headerlink" title="选择性批处理"></a>选择性批处理</h2><p>针对上述所提到的迭代级调度的方法，在一个批中的请求有以下情况：(1) 所处阶段不同，prefill &#x2F; decode。（2）序列长度不同。调度器希望同时存在这两个符合批处理条件的请求才能执行批处理，随着批处理大小的增加，这种可能性进一步呈指数级下降，因此使用大批处理大小来提高吞吐量而不影响延迟是困难的。</p><p><img src="/posts_img/Orca/4.png?100x"></p><p>针对此问题，作者提出的选择性批处理方法仅将批处理应用于特定操作（例如矩阵乘法），而对于无法批处理的操作（如注意力机制，输入张量大小可变的操作）则单独处理，这种选择性方法提升了效率，而不会增加额外的计算成本。</p><h1 id="调度策略"><a href="#调度策略" class="headerlink" title="调度策略"></a>调度策略</h1><p>本文中调度算法考虑的因素：</p><ul><li>FCFS</li><li>在内存限制的情况下，尽可能地增大batch_size以增大吞吐量</li></ul><p><img src="/posts_img/Orca/7.png?50"></p><p>通过流水线并行，迭代级调度可以消除bubble的影响</p><p><img src="/posts_img/Orca/8.png?50"></p><h1 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h1><p>ORCA 使用了 <strong>层内并行</strong> 和 <strong>层间并行</strong> 模型来将大规模模型分布在多个 GPU 上。通过采用 GPU 分区，该系统可以扩展到拥有数百亿参数的 Transformer 模型（如 GPT-3 175B 及更大）。</p><table><thead><tr><th align="center"><img src="/posts_img/Orca/5.png" alt="Image 1"></th><th align="center"><img src="/posts_img/Orca/6.png" alt="Image 2"></th></tr></thead></table><p>该架构主要包括：</p><ul><li><strong>调度器</strong>：根据调度算法选择批。</li><li><strong>引擎主控</strong>：管理迭代级调度，并将任务分发到 GPU。</li><li><strong>工作单元</strong>：每个工作单元负责模型的一部分，可以在多个 GPU 之间处理请求。</li><li><strong>注意力 K&#x2F;V 管理器</strong>：管理和维护跨迭代的注意力键值对，允许其他操作进行选择性批处理。</li></ul><h1 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h1><h2 id="基准测试"><a href="#基准测试" class="headerlink" title="基准测试"></a>基准测试</h2><p>ORCA 与 NVIDIA 的 FasterTransformer 进行了对比测试，测试的模型规模达到了 3410 亿参数（如 GPT-3）。实验结果显示：</p><ul><li>吞吐量提升 <strong>36.9</strong> 倍，并且延迟保持相同。</li><li>由于迭代级调度，<strong>排队时间</strong> 显著减少，从而加快响应速度。</li><li>在不同的批处理规模和工作负载下，ORCA 显著优于传统系统。</li></ul><p><img src="/posts_img/Orca/9.png?50"></p><h1 id="先前工作和讨论"><a href="#先前工作和讨论" class="headerlink" title="先前工作和讨论"></a>先前工作和讨论</h1><h2 id="BatchMaker-系统"><a href="#BatchMaker-系统" class="headerlink" title="BatchMaker 系统"></a>BatchMaker 系统</h2><p>BatchMaker 是一个用于 RNN（循环神经网络）的服务系统，能够以 RNN 单元的粒度进行调度和批处理。由于 RNN 每个单元执行相同的计算，因此可以将相同的单元进行批处理，即使它们处于不同的位置（即不同的词元索引）。这种灵活性允许新到达的请求加入当前正在执行的批次，而不需要等待整个批次完成。</p><p>然而，BatchMaker 无法对 Transformer 模型进行同样的批处理，因为 Transformer 中每个单元（如注意力机制中的键值对）随词元索引变化而不同。因此，BatchMaker 在处理不同词元时无法实现批处理，导致处理大多是串行的，并且无法支持大规模模型的并行训练。</p><h2 id="ORCA-的改进"><a href="#ORCA-的改进" class="headerlink" title="ORCA 的改进"></a>ORCA 的改进</h2><p>相比于 BatchMaker，ORCA 的设计基于最大化每次模型参数读取时的计算效率。这是因为对于大模型来说，从 GPU 全局内存读取参数是影响整体执行时间的主要瓶颈。ORCA 通过迭代级调度和选择性批处理来处理所有已准备好的词元，无论它们是否可以被批处理（如 Attention 操作不能被批处理）。</p><h2 id="针对-Transformer-模型的专用推理引擎"><a href="#针对-Transformer-模型的专用推理引擎" class="headerlink" title="针对 Transformer 模型的专用推理引擎"></a>针对 Transformer 模型的专用推理引擎</h2><p>Transformer 模型的性能促使了专门的推理系统的发展，如 FasterTransformer、LightSeq、TurboTransformers 等。这些系统主要作为现有服务系统（如 Triton 或 TensorFlow Serving）的后端推理引擎，仍采用传统的请求级调度。相比之下，ORCA 通过引入更细粒度的调度机制来提升效率。</p><h2 id="服务系统与推理引擎的接口"><a href="#服务系统与推理引擎的接口" class="headerlink" title="服务系统与推理引擎的接口"></a>服务系统与推理引擎的接口</h2><p>当前的通用服务系统如 Triton 和 Clipper 提供了抽象层来处理客户端请求，并调度底层的推理引擎。虽然这种设计分离了服务层和执行层的实现，但在处理像 GPT 这种多迭代特性的模型时存在局限性。ORCA 通过紧密集成调度器与引擎，简化了迭代级调度和选择性批处理的应用。</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>ORCA 在处理 Transformer 模型的多次迭代和自回归特性方面显示出显著的改进。<strong>迭代级调度</strong> 和 <strong>选择性批处理</strong> 策略使 ORCA 能够高效处理大规模生成模型，提升了系统的性能和响应速度。</p>]]></content>
      
      
      <categories>
          
          <category> Paper Report </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LLM </tag>
            
            <tag> Inference </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MOE基础介绍</title>
      <link href="/2024/09/13/MOE-Intro/"/>
      <url>/2024/09/13/MOE-Intro/</url>
      
        <content type="html"><![CDATA[<p>MOE重要性：坊间一直流传GPT-4是MoE模型<br>本文主要参考自：<a href="https://huggingface.co/blog/zh/moe">https://huggingface.co/blog/zh/moe</a></p><h1 id="什么是MOE"><a href="#什么是MOE" class="headerlink" title="什么是MOE"></a>什么是MOE</h1><p>基于 Transformer 架构的模型，混合专家模型主要由两个关键部分组成:</p><p>● <strong>稀疏 MoE 层</strong>: 这些层代替了传统 Transformer 模型中的前馈网络 (FFN) 层。MoE 层包含若干“专家”(例如 8 个)，每个专家本身是一个独立的神经网络。在实际应用中，这些专家通常是前馈网络 (FFN)，但它们也可以是更复杂的网络结构，甚至可以是 MoE 层本身，从而形成层级式的 MoE 结构。</p><p>● <strong>门控网络或路由</strong>: 这个部分用于决定哪些令牌 (token) 被发送到哪个专家。例如，在下图中，“More”这个令牌可能被发送到第二个专家，而“Parameters”这个令牌被发送到第一个专家。有时，一个令牌甚至可以被发送到多个专家。令牌的路由方式是 MoE 使用中的一个关键点，因为路由器由学习的参数组成，并且与网络的其他部分一同进行预训练。</p><p><img src="/posts_img/MOE-Intro/1.png"></p><div style="text-align: center;">  <a href="https://arxiv.org/pdf/1701.06538">Outrageously Large Neural Network 论文中的 MoE layer</a></div><p><img src="/posts_img/MOE-Intro/2.png"></p><div style="text-align: center;">  <a href="https://arxiv.org/pdf/2101.03961">Switch Transformers paper 论文中的 MoE layer</a></div><h1 id="混合专家模型（MoEs）简短总结"><a href="#混合专家模型（MoEs）简短总结" class="headerlink" title="混合专家模型（MoEs）简短总结"></a>混合专家模型（MoEs）简短总结</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>● 与稠密模型相比，<strong>预训练速度更快</strong><br>● 与具有相同参数数量的模型相比，具有更快的 <strong>推理速度</strong><br>● 与具有相同激活参数的稠密模型模型相比，具有更高的 <strong>推理精度</strong></p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>● 需要 <strong>大量显存</strong>，因为所有专家系统都需要加载到内存中（现有offload技术）<br>● 在 <strong>微调方面</strong> 存在诸多挑战，但 <a href="https://arxiv.org/pdf/2305.14705">近期的研究</a> 表明，对混合专家模型进行指令调优具有很大的潜力<br>● 不同的专家倾向于专注于不同的 <strong>语义</strong>，而不是特定 <strong>领域</strong><br>● 由于设备间需要传递数据，网络带宽常常成为性能瓶颈，应采取适当的并行化策略（3D并行+专家并行）</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] Outrageously Large Neural Networks: The Sparsely-Gated Mixture-of-Experts Layer (2017)<br>[2] Switch Transformers: Scaling to Trillion Parameter Models with Simple and Efficient Sparsity (Jan 2022)</p>]]></content>
      
      
      <categories>
          
          <category> Intro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LLM </tag>
            
            <tag> MOE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MOE利用Offload进行高效推理</title>
      <link href="/2024/09/12/MOE-Offloading/"/>
      <url>/2024/09/12/MOE-Offloading/</url>
      
        <content type="html"><![CDATA[<p>这篇文章提出了如何在资源受限的消费级硬件上高效地运行稀疏专家混合（MoE）语言模型的方法。将Mixtral-8x7B这个需要100G以上算力才能部署的模型在12G显存+11G内存的组合下跑出来。<br>论文：<a href="https://arxiv.org/abs/2312.17238">https://arxiv.org/abs/2312.17238</a><br>Colab代码：<a href="https://colab.research.google.com/drive/1ZkC0k487oBEF19R8_9nq2MSHFyQ6OspG?usp=drive_link">https://colab.research.google.com/drive/1ZkC0k487oBEF19R8_9nq2MSHFyQ6OspG?usp=drive_link</a></p><h1 id="引言与背景"><a href="#引言与背景" class="headerlink" title="引言与背景"></a>引言与背景</h1><p>论文的引言部分介绍了大规模预训练语言模型（LLMs）在自然语言处理领域的重要性。这些模型如GPT-3、GPT-4以及其他开放访问的LLMs（如LLaMA、Falcon、BLOOM等）推动了语言技术的迅猛发展。然而，LLMs 的庞大参数量使得它们的推理成本极高，通常需要高端的GPU设备才能运行，限制了它们在普通硬件上的使用。<br>为了缓解这个问题，稀疏的专家混合（MoE）模型被提出。MoE通过只激活模型中的一部分“专家”来计算每个输入，从而提高了计算效率。然而，MoE模型的规模依然庞大，尤其是在需要多GPU的环境下。因此，如何在消费级硬件上运行这些模型是一个重要的研究问题。</p><h1 id="三大解决策略"><a href="#三大解决策略" class="headerlink" title="三大解决策略"></a>三大解决策略</h1><p>Mixtral-8x7B模型中的总参数为46.7亿，专家构成45.1亿（96.6%），在内存受限的情况下，减少专家切换时GPU与RAM之间的数据传输对MoE模型进行推理很关键。作者主要提出通过LRU缓存（LRU caching）和专家的推测性提前加载（Speculative Expert Loading）来减少GPU与RAM之间的数据传输，从而加速推理过程。关键创新点包括：</p><ol><li><p>LRU缓存专家重用模式：MoE模型在处理连续的token时，某些专家会被频繁地重用。因此，作者设计了一种LRU缓存机制，利用这种专家重用的规律来减少GPU-RAM之间的通信开销。<br><img src="/posts_img/MOE-Offloading/1.png"></p></li><li><p>推测性专家加载：由于推理过程中无法提前确定下一层需要加载的专家，因此作者提出了一种基于推测的加载机制，通过对前一层的隐藏状态应用下一层的门控函数来猜测即将需要的专家（可能是因为有residual的原因）。这种机制在推测正确时，下一层的计算可以立即开始，显著减少了推理延迟。</p></li><li><p>混合量化技术：在模型压缩方面，作者使用了一种半二次量化（Half Quadratic Quantization, HQQ）的方法对专家层进行更高的压缩，同时保持其他层的较高精度。这种量化策略有效减少了模型大小，并保持了较好的推理性能。</p></li></ol><h1 id="实验与评估"><a href="#实验与评估" class="headerlink" title="实验与评估"></a>实验与评估</h1><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>用到的模型：Mixtral 8x7B ，一个主流的MOE模型，在大多数基准测试中优于或等价于Llama2 70B, GPT3.5，且推理速度比Llama2 70B快六倍！<br>Mixtral 8x7B 是decoder-only model, 其中 FFN 从8个不同的参数组（专家）中进行挑选，在每一层，每个token, router network 都会选2个组来进行生成并进行组合：</p><ol><li>支持32K上下文</li><li>支持英语，法语，意大利语，德语，西班牙语（中文支持很差）</li><li>在代码生成上很强</li><li>能被微调成一个高分（MT-Bench）的 instruction-following model</li></ol><h2 id="评估结论"><a href="#评估结论" class="headerlink" title="评估结论"></a>评估结论</h2><p>论文在不同硬件配置（如RTX 3060、T4等）下对提出的方法进行了详尽的实验评估，得出了以下几个主要结论：</p><ol><li><p>专家缓存与推测加载的有效性：通过测试不同缓存大小和提前加载的专家数量，作者发现缓存命中率和推测加载的准确率显著提高了模型的推理速度。例如，在缓存大小为4时，缓存命中率可以达到约0.8，推测加载大小为2时，推测加载的准确率则可达到0.9以上。<br><img src="/posts_img/MOE-Offloading/2.png"></p></li><li><p>量化对模型性能的影响：通过对模型进行不同量化比特的测试，作者验证了在保持较好准确率的同时，量化可以有效减少模型大小。例如，使用2-bit量化时，模型的推理延迟显著降低，同时在WikiText2和C4数据集上的困惑度仅略有上升。</p></li><li><p>实际推理性能：在使用完整的算法时，消费级硬件上如RTX 3060和T4可以达到每秒生成2-3个token的性能，远远优于直接在设备内存不足的情况下推理时的性能表现。<br><img src="/posts_img/MOE-Offloading/3.png"></p></li></ol><h1 id="结论与未来工作"><a href="#结论与未来工作" class="headerlink" title="结论与未来工作"></a>结论与未来工作</h1><p>论文总结了该方法在推理速度上相较于传统的加载方式有显著提高，尤其是在消费级硬件和免费云平台（如Google Colab）上，使得大规模稀疏MoE模型的使用更加广泛化。未来的研究方向可能包括进一步优化专家预测加载算法，探索其他的推理加速方法。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这篇论文解决了大规模稀疏专家模型在推理时的硬件瓶颈问题，提出了一种通过专家缓存与预测加载来优化推理速度的方案，并使用混合量化技术在保证准确率的同时大幅减少了模型大小和推理时间。对于希望在低端硬件上使用大规模语言模型的研究人员来说，本文的贡献提供了一个具有实用价值的解决方案。</p><h1 id="Ideas"><a href="#Ideas" class="headerlink" title="Ideas"></a>Ideas</h1><ol><li>“Note that out of 46.7B total parameters in the Mixtral-8x7B model, the experts constitute 45.1B (96.6%).” 专家参数占了主导位置，这种异构型能否用于边缘-云端计算，隐私保护等</li><li>对于多用户多对话的在线推理服务系统，采取批量、并行的策略合理使用experts参数，增加吞吐、降低延迟等</li><li>将这种offload方法引入到训练过程中，可以显著扩大模型或数据集的规模</li></ol>]]></content>
      
      
      <categories>
          
          <category> Paper Report </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LLM </tag>
            
            <tag> MOE </tag>
            
            <tag> Inference </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/09/11/hello-world/"/>
      <url>/2024/09/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><p>博客搭建参考文章：<a href="https://blog.csdn.net/mjh1667002013/article/details/129290903">【Hexo】Hexo搭建Butterfly主题并快速美化_hexo butterfly-CSDN博客</a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
